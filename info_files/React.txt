React is an open-source JavaScript library for building user interfaces.
It is used to create components, handle state and props, utilize event listeners and certain life cycle methods to update data as it changes. 
React combines HTML with JavaScript functionality to create its own markup language, JSX. 

React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript. 

Benefits:
It lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable. 

you can actually write JavaScript directly within JSX. 
To do this, you simply include the code you want to be treated as JavaScript within curly braces: { 'this is treated as JavaScript code' }
However, because JSX is not valid JavaScript, JSX code must be compiled into JavaScript.

const JSX = <h1>Hello JSX!</h1>
-----------------------------------------------
Create a Complex JSX Element

JSX must return a single element.
This one parent element would wrap all of the other levels of nested elements.

Valid:
<div>
  <p>Paragraph One</p>
  <p>Paragraph Two</p>
  <p>Paragraph Three</p>
</div>

const JSX = 
<div>
    <h1>QQ</h1>
    <p>QQ</p>
    <ul>
        <li>QQ</li>
        <li>QQ</li>
        <li>QQ</li>
    </ul>
</div
-----------------------------------------------
Comments
{/* */}
-----------------------------------------------
Render HTML Elements to the DOM

API known as ReactDOM

ReactDOM.render(componentToRender, targetNode) where the first argument is the React element or component that you want to render, 
and the second argument is the DOM node that you want to render the component to.

ReactDOM.render(<item to be rendered>, <where to be rendered>);

ReactDOM.render(JSX,document.getElementById('challenge-node'));
----------------------------------------------
Define an HTML Class in JSX
One key difference in JSX is that you can no longer use the word class to define HTML classes. 
This is because class is a reserved word in JavaScript. Instead, JSX uses className.

naming convention for all HTML attributes and event references in JSX become camelCase

const JSX = (
  <div className="myDiv">
    <h1>Add a class to this div</h1>
  </div>
);
----------------------------------------------
Any JSX element can be written with a self-closing tag, and every element must be closed. 
A <div>, on the other hand, can be written as <div /> or <div></div>. 
The difference is that in the first syntax version there is no way to include anything in the <div />. 
text is considered a child of the div element, so you will not be able to use a self-closing tag.
---------------------------------------------
Components

Components are the core of React. Everything in React is a component

two ways to create a React component:
	1)first way is to use a JavaScript function. Defining a component in this way creates a stateless functional component.
	receive data and render it, but does not manage or track changes to that data.	
	One important thing to note is that React requires your function name to begin with a capital letter.
	
	// After being transpiled, the <div> will have a CSS class of 'customClass'
const DemoComponent = function() {
  return (
    <div className='customClass' />
  );pro
};

	2)other way to define a React component is with the ES6 class syntax. extends the React.Component class.
	
	class Kitten extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <h1>Hi</h1>
    );
  }
}

It is best practice to call a component's constructor with super, and pass props to both. This makes sure the component is initialized properly.
---------------------------------------------
Create a Component with Composition

const ChildComponent = () => {
  return (
    <div>
      <p>I am the child</p>
    </div>
  );
};

class ParentComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>I am the parent</h1>
        { /* change code below this line */ }
        <ChildComponent/>

        { /* change code above this line */ }
      </div>
    );
  }
};
******************************
const TypesOfFruit = () => {
  return (
    <div>
      <h2>Fruits:</h2>
      <ul>
        <li>Apples</li>
        <li>Blueberries</li>
        <li>Strawberries</li>
        <li>Bananas</li>
      </ul>
    </div>
  );
};

const Fruits = () => {
  return (
    <div>
      { /* change code below this line */ }
      <TypesOfFruit/>
      { /* change code above this line */ }
    </div>
  );
};

class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        { /* change code below this line */ }
        <Fruits/>
        { /* change code above this line */ }
      </div>
    );
  }
};

Rendering ES6 style class components within other components is no different than rendering the simple components
You can render JSX elements, stateless functional components, and ES6 class components within other components.
-------------------------------------------------
Render a Class Component to the DOM

ReactDOM.render(<ComponentToRender />, targetNode)

class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        {/* change code below this line */}
        <Fruits/>
        <Vegetables/>
        {/* change code above this line */}
      </div>
    );
  }
};

// change code below this line
ReactDOM.render(<TypesOfFood/>, document.getElementById('challenge-node'))
----------------------------------------------------
props

In React, you can pass props, or properties, to child components

const Welcome = (props) => <h1>Hello, {props.user}!</h1>

const CurrentDate = (props) => {
  return (
    <div>
      { /* change code below this line */ }
      <p>The current date is:{props.date} </p>
      { /* change code above this line */ }
    </div>
  );
};

class Calendar extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>What date is it?</h3>
        { /* change code below this line */ }
        <CurrentDate date={Date()}/>
        { /* change code above this line */ }
      </div>
    );
  }
};
*************************
pass array as prop
*************************
<ParentComponent>
  <ChildComponent colors={["green", "blue", "red"]} />
</ParentComponent>

const ChildComponent = (props) => <p>{props.colors.join(', ')}</p>

<p>green, blue, red</p>

**************************
Default props
**************************
allows you to specify what a prop value should be if no value is explicitly provided. 

MyComponent.defaultProps = { location: 'San Francisco' }

React assigns default props if props are undefined, but if you pass null as the value for a prop, it will remain null

const ShoppingCart = (props) => {
  return (
    <div>
      <h1>Shopping Cart Component</h1>
    </div>
  )
};
// change code below this line
ShoppingCart.defaultProps = {items: 0}

Override Default Props
The way to override the default props is to explicitly set the prop values for a component.

const Items = (props) => {
  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>
}

Items.defaultProps = {
  quantity: 0
}

class ShoppingCart extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    { /* change code below this line */ }
    return <Items quantity={10}/>
    { /* change code above this line */ }
  }
};

Items.defaultProps = {
  quantity: 0
}
Items.defaultProps = {
  quantity: 100
}
*******************************************
verify that components receive props of the correct type. 
*******************************************
MyComponent.propTypes = { handleClick: PropTypes.func.isRequired }

n the example above, the PropTypes.func part checks that handleClick is a function. Adding isRequired tells React 
that handleClick is a required property for that component. You will see a warning if that prop isn't provided. Also notice that func represents function.

PropTypes is imported independently from React

import React, { PropTypes } from 'react';

To set a propTypes, the syntax to be followed is

itemName.propTypes = {
  props: PropTypes.dataType.isRequired
};

ex:

const Items = (props) => {
  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>
};

// change code below this line

Items.propTypes = {quantity: PropTypes.number.isRequired}

// change code above this line

Items.defaultProps = {
  quantity: 0
};

class ShoppingCart extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <Items quantity={3}/>
  }
};
*************************************
Access Props Using this.props
*************************************
The ES6 class component uses a convention to access props:
{this.props.data}
Anytime you refer to a class component within itself, you use the this keyword

class ReturnTempPassword extends React.Component {
  constructor(props) {
    super(props);

  }
  render() {
    return (
        <div>
            { /* change code below this line */ }
            <p>Your temporary password is: <strong>{this.props.tempPassword}</strong></p>
            { /* change code above this line */ }
        </div>
    );
  }
};

class ResetPassword extends React.Component {
  constructor(props) {
    super(props);

  }
  render() {
    return (
        <div>
          <h2>Reset Password</h2>
          <h3>We've generated a new temporary password for you.</h3>
          <h3>Please reset this password from your account settings ASAP.</h3>
          { /* change code below this line */ }
          <ReturnTempPassword tempPassword = '12345678'/>
          { /* change code above this line */ }
        </div>
    );
  }
};


A stateless functional component is any function you write which accepts props and returns JSX. 
A stateless component is a class that extends React.Component, but does not use internal state
Finally, a stateful component is any component that does maintain its own internal state. 

class CampSite extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <Camper name='QQ'/>
      </div>
    );
  }
};
// change code below this line
class Camper extends React.Component {
  constructor(props){
    super(props);
  }

  render(){
    return(
      <p>{this.props.name}</p>
    );
  }
}

Camper.defaultProps = {
  name: 'CamperBot'
}

Camper.propTypes = {name: PropTypes.string.isRequired}
-------------------------------------------------------------
Create a Stateful Component
State consists of any data your application needs to know about, that can change over time. 

You create state in a React component by declaring a state property on the component class in its constructor. 
This initializes the component with state when it is created. The state property must be set to a JavaScript object. 

this.state = {
  // describe your state here
}

You have access to the state object throughout the life of your component. You can update it, render it in your UI, and pass it as props to child components. 
The state object can be as complex or as simple as you need it to be. You must create a class component by extending React.Component in order 
to create state like this.


class StatefulComponent extends React.Component {
  constructor(props) {
    super(props);
    // initialize state here

    this.state = {
    name: 'QQ'
    }
  }

  render() {
    return (
      <div>
        <h1>{this.state.name}</h1>
      </div>
    );
  }
};

********************************************
Render State in the User Interface
********************************************
Once you define a component's initial state, you can display any part of it in the UI that is rendered. 
If a component is stateful, it will always have access to the data in state in its render() method. You can access the data with this.state.
If you want to access a state value within the return of the render method, you have to enclose the value in curly braces.

State is one of the most powerful features of components in React. It allows you to track important data in your app and render a UI 
in response to changes in this data. If your data changes, your UI will change. React uses what is called a virtual DOM,
to keep track of changes behind the scenes. When state data updates, it triggers a re-render of the components using that data - including
child components that received the data as a prop. React updates the actual DOM, but only where necessary.
This means you don't have to worry about changing the DOM. You simply declare what the UI should look like.

state is completely encapsulated, or local for stateful component
******************************************
another way to access state in a component
******************************************
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'freeCodeCamp'
    }
  }
  render() {
    // change code below this line
    const name = this.state.name
    // change code above this line
    return (
      <div>
        { /* change code below this line */ }
        <h1>{name}</h1>
        { /* change code above this line */ }
      </div>
    );
  }
};
******************************************
Set State with this.setState
******************************************
this.setState({
  username: 'Lewis'
});

React expects you to never modify state directly, instead always use this.setState() when state changes occur. 
React may batch multiple state updates in order to improve performance. 
setState method can be asynchronous

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'Initial State'
    };
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick() {
    // change code below this line
    this.setState({
      name: 'React Rocks!'
    })
    // change code above this line
  }
  render() {
    return (
      <div>
        <button onClick={this.handleClick}>Click Me</button>
        <h1>{this.state.name}</h1>
      </div>
    );
  }
};
--------------------------------------------------------------
Bind 'this' to a Class Method

define methods for your component class. 
A class method typically needs to use the this keyword so it can access properties on the class (such as state and props) inside the scope of the method. 
There are a few ways to allow your class methods to access this:

1)explicitly bind this in the constructor
this.handleClick = this.handleClick.bind(this)

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      itemCount: 0
    };
    // change code below this line
    this.addItem = this.addItem.bind(this);
    // change code above this line
  }
  addItem() {
    this.setState({
      itemCount: this.state.itemCount + 1
    });
  }
  render() {
    return (
      <div>
        { /* change code below this line */ }
        <button onClick={this.addItem}>Click Me</button>
        { /* change code above this line */ }
        <h1>Current Item Count: {this.state.itemCount}</h1>
      </div>
    );
  }
};
------------------------------------------------------------
monitor the status of a value
then render the UI conditionally based on this value.

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      visibility: false
    };
    // change code below this line
    this.toggleVisibility = this.toggleVisibility.bind(this)
    // change code above this line
  }
  // change code below this line
  toggleVisibility() {
    this.setState({
      visibility: !this.state.visibility
    })
  }
  // change code above this line
  render() {
    if (this.state.visibility) {
      return (
        <div>
          <button onClick={this.toggleVisibility}>Click Me</button>
          <h1>Now you see me!</h1>
        </div>
      );
    } else {
      return (
        <div>
          <button onClick={this.toggleVisibility}>Click Me</button>
        </div>
      );
    }
  }
};
-------------------------------------------------------------------
Simple Counter

class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0
    };
    // change code below this line
    this.increment = this.increment.bind(this);
    this.decrement = this.decrement.bind(this);
    this.reset = this.reset.bind(this);
    // change code above this line
  }
  // change code below this line
  increment(){
    this.setState({
      count: ++this.state.count
    })
  }

  decrement(){
    this.setState({
      count: --this.state.count
    })
  }

  reset(){
    this.setState({
      count: 0
    })
  }
  // change code above this line
  render() {
    return (
      <div>
        <button className='inc' onClick={this.increment}>Increment!</button>
        <button className='dec' onClick={this.decrement}>Decrement!</button>
        <button className='reset' onClick={this.reset}>Reset</button>
        <h1>Current Count: {this.state.count}</h1>
      </div>
    );
  }
};
-------------------------------------------------------------------------------------
Create a Controlled Input

class ControlledInput extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: ''
    };
    // change code below this line
    this.handleChange= this.handleChange.bind(this);
    // change code above this line
  }
  // change code below this line
  handleChange(event){
    this.setState({
      input: event.target.value
    })
  }
  // change code above this line
  render() {
    return (
      <div>
        { /* change code below this line */}
        <input value={this.state.input} onChange={this.handleChange}/>
        { /* change code above this line */}
        <h4>Controlled Input:</h4>
        <p>{this.state.input}</p>
      </div>
    );
  }
};
-------------------------------------------------------------------
Create a Controlled Form

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      submit: ''
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }
  handleChange(event) {
    this.setState({
      input: event.target.value
    });
  }
  handleSubmit(event) {
    // change code below this line
    event.preventDefault()//prevent the default form submit behavior which will refresh the web page.
    this.setState({
      submit: this.state.input
    })
    // change code above this line
  }
  render() {
    return (
      <div>
        <form onSubmit={this.handleSubmit}>
          { /* change code below this line */ }
          <input value={this.state.input} onChange={this.handleChange}/>
          { /* change code above this line */ }
          <button type='submit'>Submit!</button>
        </form>
        { /* change code below this line */ }
        <h1>{this.state.submit}</h1>
        { /* change code above this line */ }
      </div>
    );
  }
};
---------------------------------------------------------------
React paradigm 

The first is unidirectional data flow. 
State flows in one direction down the tree of your application's components, from the stateful parent component to child components. 
The child components only receive the state data they need. 

The second is that complex stateful apps can be broken down into just a few, or maybe a single, stateful component. 
The rest of your components simply receive state from the parent as props, and render a UI from that state. 
It begins to create a separation where state management is handled in one part of code and UI rendering in another. 

class MyApp extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'CamperBot'
    }
  }
  render() {
    return (
       <div>
         <Navbar name={this.state.name} />
       </div>
    );
  }
};

class Navbar extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
    <div>
      <h1>Hello, my name is: {this.props.name} </h1>
    </div>
    );
  }
};
---------------------------------------------------------
Pass a Callback as Props

class MyApp extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      inputValue: ''
    }
    this.handleChange = this.handleChange.bind(this);
  }
  handleChange(event) {
    this.setState({
      inputValue: event.target.value
    });
  }
  render() {
    return (
       <div>
        { /* change code below this line */ }
        <GetInput input={this.state.inputValue} handleChange={this.handleChange}/>
        <RenderInput input={this.state.inputValue}/>
        { /* change code above this line */ }
       </div>
    );
  }
};

class GetInput extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>Get Input:</h3>
        <input
          value={this.props.input}
          onChange={this.props.handleChange}/>
      </div>
    );
  }
};

class RenderInput extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>Input Render:</h3>
        <p>{this.props.input}</p>
      </div>
    );
  }
};
----------------------------------------------------------
Lifecycle Method 

React components have several special methods that provide opportunities to perform actions at specific points in the lifecycle of a component. 
These are called lifecycle methods, or lifecycle hooks, and allow you to catch components at certain points in time. This can be before they are rendered, 
before they update, before they receive props, before they unmount, and so on.
-----------------------------
componentWillMount()
	called before the render() method when a component is being mounted to the DOM. 
	
	class MyComponent extends React.Component {
  	constructor(props) {
    super(props);
  	}
  	componentWillMount() {
    // change code below this line
    console.log("It's mount method")
    // change code above this line
  	}
  	render() {
    	return <div />
  	}
	};

------------------------------
componentDidMount()
	called after a component is mounted to the DOM.
	
	Any calls to setState() here will trigger a re-rendering of your component. 
	When you call an API in this method, and set your state with the data that the API returns, it will automatically trigger an update once you receive the data.
	
	class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      activeUsers: null
    };
  }
  componentDidMount() {
    setTimeout( () => {
      this.setState({
        activeUsers: 1273
      });
    }, 2500);   //It sets state after 2.5 seconds to simulate calling a server to retrieve data. 
  }
  render() {
    return (
      <div>
        <h1>Active Users: { this.state.activeUsers }</h1>
      </div>
    );
  }
};


The componentDidMount() method is also the best place to attach any event listeners you need to add for specific functionality. 
It's good practice to use this lifecycle method to do any clean up on React components before they are unmounted and destroyed

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      message: ''
    };
    this.handleEnter = this.handleEnter.bind(this);
    this.handleKeyPress = this.handleKeyPress.bind(this);
  }
  // change code below this line
  componentDidMount() {
    document.addEventListener('keydown', this.handleKeyPress);
  }
  componentWillUnmount() {
    document.removeEventListener('keydown', this.handleKeyPress);
  }
  // change code above this line
  handleEnter() {
    this.setState({
      message: this.state.message + 'You pressed the enter key! '
    });
  }
  handleKeyPress(event) {
    if (event.keyCode === 13) {
      this.handleEnter();
    }
  }
  render() {
    return (
      <div>
        <h1>{this.state.message}</h1>
      </div>
    );
  }
};


------------------------------
componentWillReceiveProps()
 called whenever a component is receiving new props
 This method receives the new props as an argument, which is usually written as nextProps. 
 You can use this argument and compare with this.props and perform actions before the component updates. 
 For example, you may call setState() locally before the update is processed.

class Dialog extends React.Component {
  constructor(props) {
    super(props);
  }
  componentWillUpdate() {
    console.log('Component is about to update...');
  }
  // change code below this line
  componentWillReceiveProps(nextProps){
    console.log(this.props)
    console.log(nextProps)
  }

  componentDidUpdate(){
    console.log('Component was update');
  }
  // change code above this line
  render() {
    return <h1>{this.props.message}</h1>
  }
};

class Controller extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      message: 'First Message'
    };
    this.changeMessage = this.changeMessage.bind(this);
  }
  changeMessage() {
    this.setState({
      message: 'Second Message'
    });
  }
  render() {
    return (
      <div>
        <button onClick={this.changeMessage}>Update</button>
        <Dialog message={this.state.message}/>
      </div>
    );
  }
};
------------------------------
shouldComponentUpdate()

if any component receives new state or new props, it re-renders itself and all its children.
But React provides a lifecycle method you can call when child components receive new state or props, and declare specifically if the components should update or not. 
takes nextProps and nextState as parameters.
This method is a useful way to optimize performance.
The method must return a boolean value that tells React whether or not to update the component.

class OnlyEvens extends React.Component {
  constructor(props) {
    super(props);
  }
  shouldComponentUpdate(nextProps, nextState) {
    console.log('Should I update?');
     // change code below this line
    console.log(nextProps.value)
    return nextProps.value%2 == 0
     // change code above this line
  }
  componentWillReceiveProps(nextProps) {
    console.log('Receiving new props...');
  }
  componentDidUpdate() {
    console.log('Component re-rendered.');
  }
  render() {
    return <h1>{this.props.value}</h1>
  }
};

class Controller extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 0
    };
    this.addValue = this.addValue.bind(this);
  }
  addValue() {
    this.setState({
      value: this.state.value + 1
    });
  }
  render() {
    return (
      <div>
        <button onClick={this.addValue}>Add</button>
        <OnlyEvens value={this.state.value}/>
      </div>
    );
  }
};

------------------------------
componentWillUpdate()

------------------------------
componentDidUpdate()
called immediately after a component re-renders.

rendering and mounting are considered different things in the component lifecycle. 

When a page first loads, all components are mounted and this is where methods like componentWillMount() and componentDidMount() are called.
After this, as state changes, components re-render themselves. The next challenge covers this in more detail.
-----------------------------
componentWillUnmount()


--------------------------------------------------------------------------------------
Inline Styles


apply inline styles HTML
<div style="color: yellow; font-size: 16px">Mellow Yellow</div>

apply inline styles JSX
<div style={{color: "yellow", fontSize: 16}}>Mellow Yellow</div>

camelCase the "fontSize"  because React will not accept kebab-case keys in the style object.

fontSize - 16\"16px"

if you want to use em, for example, you wrap the value and the units in quotes, like {fontSize: "4em"}

Other than the length values that default to px, all other property values should be wrapped in quotes.

If you have a large set of styles, you can assign a style object to a constant to keep your code organized.


const styles = ({color: "purple", fontSize: 40, border: "2px solid purple"})
// change code above this line
class Colorful extends React.Component {
  render() {
    // change code below this line
    return (
      <div style={styles}>Style Me!</div>
    );
    // change code above this line
  }
};
------------------------------------------------------------------------------
Magic ball

const inputStyle = {
  width: 235,
  margin: 5
}

class MagicEightBall extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      userInput: '',
      randomIndex: ''
    }
    this.ask = this.ask.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }
  ask() {
    if (this.state.userInput) {
      this.setState({
        randomIndex: Math.floor(Math.random() * 20),
        userInput: ''
      });
    }
  }
  handleChange(event) {
    this.setState({
      userInput: event.target.value
    });
  }
  render() {
    const possibleAnswers = [
      'It is certain',
      'It is decidedly so',
      'Without a doubt', 
      'Yes, definitely',
      'You may rely on it',
      'As I see it, yes',
      'Outlook good',
      'Yes',
      'Signs point to yes',
      'Reply hazy try again',
      'Ask again later',
      'Better not tell you now',
      'Cannot predict now',
      'Concentrate and ask again',
      'Don\'t count on it', 
      'My reply is no',
      'My sources say no',
      'Most likely',
      'Outlook not so good',
      'Very doubtful'
    ];
    const answer = possibleAnswers[this.state.randomIndex] // << change code here
    return (
      <div>
        <input
          type="text"
          value={this.state.userInput}
          onChange={this.handleChange}
          style={inputStyle} /><br />
        <button onClick={this.ask}>
          Ask the Magic Eight Ball!
        </button><br />
        <h3>Answer:</h3>
        <p>
          { /* change code below this line */ }
          {answer}
          { /* change code above this line */ }
        </p>
      </div>
    );
  }
};
-------------------------------------------------------------
Render with an If/Else Condition

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      display: true
    }
    this.toggleDisplay = this.toggleDisplay.bind(this);
  }
  toggleDisplay() {
    this.setState({
      display: !this.state.display
    });
  }
  render() {
    // change code below this line
    if(this.state.display === true) 
    return (
       <div>
         <button onClick={this.toggleDisplay}>Toggle Display</button>
         <h1>Displayed!</h1>
       </div>
    );
    else
    return (
       <div>
         <button onClick={this.toggleDisplay}>Toggle Display</button>
       </div>
    );
  }
};
---------------------------------------------------------
&& for a More Concise Conditional

{condition && <p>markup</p>}

If the condition is true, the markup will be returned. If the condition is false, the operation will immediately return false after evaluating the condition and return nothing.

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      display: true
    }
    this.toggleDisplay = this.toggleDisplay.bind(this);
  }
  toggleDisplay() {
    this.setState({
      display: !this.state.display
    });
  }
  render() {
    // change code below this line
    return (
       <div>
         <button onClick={this.toggleDisplay}>Toggle Display</button>
         {this.state.display && <h1>Displayed!</h1>}
       </div>
    );
  }
};
--------------------------------------------------------------------------
ternary operator


const inputStyle = {
  width: 235,
  margin: 5
}

class CheckUserAge extends React.Component {
  constructor(props) {
    super(props);
    // change code below this line
    this.state = {
      input: '',
      userAge: ''
    }
    // change code above this line
    this.submit = this.submit.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }
  handleChange(e) {
    this.setState({
      input: e.target.value,
      userAge: ''
    });
  }
  submit() {
    this.setState({
      userAge: this.state.input
    });
  }
  render() {
    const buttonOne = <button onClick={this.submit}>Submit</button>;
    const buttonTwo = <button>You May Enter</button>;
    const buttonThree = <button>You Shall Not Pass</button>;
    return (
      <div>
        <h3>Enter Your Age to Continue</h3>
        <input
          style={inputStyle}
          type="number"
          value={this.state.input}
          onChange={this.handleChange} /><br />
        {
          (this.state.userAge >= 18) ? buttonTwo : (this.state.userAge == '') ? buttonOne : buttonThree
        }
      </div>
    );
  }
};
------------------------------------------------------------------
50/50

class Results extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <h1>
      {
       this.props.fiftyFifty ? 'You win!' : 'You lose!'
      }
      </h1>
    )
  };
};

class GameOfChance extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      counter: 1
    }
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick() {
    this.setState({
      counter: ++this.state.counter // change code here
    });
  }
  render() {
    let expression = Math.random() > .5 // change code here
    return (
      <div>
        <button onClick={this.handleClick}>Play Again</button>
        { /* change code below this line */ }
        <Results fiftyFifty={expression}/>
        { /* change code above this line */ }
        <p>{'Turn: ' + this.state.counter}</p>
      </div>
    );
  }
};
------------------------------------------------------------------------------
You can also render CSS conditionally based on the state of a React component. 
To do this, you check for a condition, and if that condition is met, you modify the styles object that's assigned to the JSX elements in the render method.

class GateKeeper extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: ''
    };
    this.handleChange = this.handleChange.bind(this);
  }
  handleChange(event) {
    this.setState({ input: event.target.value })
  }
  render() {
    let inputStyle = {
      border: '1px solid black'
    };
    // change code below this line
    let inputStyleRed = {
      border: '3px solid red'
    };
    // change code above this line
    return (
      <div>
        <h3>Don't Type Too Much:</h3>
        <input
          type="text"
          style={this.state.input.length > 15 ? inputStyleRed : inputStyle}
          value={this.state.input}
          onChange={this.handleChange} />
      </div>
    );
  }
};
-----------------------------------------------------------------------------------
dynamicly render on user input

const textAreaStyles = {
  width: 235,
  margin: 5
};

class MyToDoList extends React.Component {
  constructor(props) {
    super(props);
    // change code below this line
    this.state = {
      userInput: '',
      toDoList: []
    }
    // change code above this line
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }
  handleSubmit() {
    const itemsArray = this.state.userInput.split(',');
    this.setState({
      toDoList: itemsArray
    });
  }
  handleChange(e) {
    this.setState({
      userInput: e.target.value
    });
  }
  render() {
    const items = this.state.toDoList.map((item) => {
      return <li>{item}</li>
    }); 
    return (
      <div>
        <textarea
          onChange={this.handleChange}
          value={this.state.userInput}
          style={textAreaStyles}
          placeholder="Separate Items With Commas" /><br />
        <button onClick={this.handleSubmit}>Create List</button>
        <h1>My "To Do" List:</h1>
        <ul>
          {items}
        </ul>
      </div>
    );
  }
};
----------------------------------------------------------------------------
unique keyAttribute

const frontEndFrameworks = [
  'React',
  'Angular',
  'Ember',
  'Knockout',
  'Backbone',
  'Vue'
];

function Frameworks() {
  const renderFrameworks = frontEndFrameworks.map(item => {
    return <li key={Math.random()}>{item}</li>
  }); 
  return (
    <div>
      <h1>Popular Front End JavaScript Frameworks</h1>
      <ul>
        {renderFrameworks}
      </ul>
    </div>
  );
};
------------------------------------------------------------------------------
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      users: [
        {
          username: 'Jeff',
          online: true
        },
        {
          username: 'Alan',
          online: false
        },
        {
          username: 'Mary',
          online: true
        },
        {
          username: 'Jim',
          online: false
        },
        {
          username: 'Sara',
          online: true
        },
        {
          username: 'Laura',
          online: true
        }
      ]
    }
  }
  render() {
    const usersOnline = this.state.users.filter(user => user.online);
    const renderOnline = usersOnline.map(item => {return <li key={item.username + 1}>{item.username}</li>});
    return (
       <div>
         <h1>Current Online Users:</h1>
         <ul>
           {renderOnline}
         </ul>
       </div>
    );
  }
};
------------------------------------------------------------------------
renderToString

Render React on the Server

There are two key reasons why rendering on the server may be used in a real world app. 

First, without doing this, your React apps would consist of a relatively empty HTML file and a large bundle of JavaScript when it's initially loaded to the browser. 
If you render the initial HTML markup on the server and send this to the client, the initial page load contains all of 
the page's markup which can be crawled by search engines. 

Second, this creates a faster initial page load experience because the rendered HTML is smaller than the JavaScript code of the entire app. 

ReactDOMServer
The method takes one argument which is a React element

class App extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <div/>
  }
};

// change code below this line
ReactDOMServer.renderToString(<App/>)






























































