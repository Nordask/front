Redux is a predictable state container for JavaScript apps.
It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.

Redux is a state management framework that can be used with a number of different web technologies


In Redux, there is a single state object that's responsible for the entire state of your application. 
if you had a React app with ten components, and each component had its own local state, 
the entire state of your app would be defined by a single state object housed in the Redux store.

The Redux store is an object which holds and manages application state. 

createStore() - use to create the Redux store
This method takes a reducer function as a required argument.

const reducer = (state = 5) => {
  return state;
}

// Redux methods are available from a Redux object
// For example: Redux.createStore()
// Define the store here:
const store = Redux.createStore(reducer);
----------------------------------------------
getState() - retrieve the current state

const store = Redux.createStore(
  (state = 5) => state
);

// change code below this line
const currentState = store.getState()

console.log(currentState)
-----------------------------------------------
Action

In Redux, all state updates are triggered by dispatching actions.
An action is simply a JavaScript object that contains information about an action event that has occurred. 
The Redux store receives these action objects, then updates its state accordingly.

// Define an action here:
let action = {type: "LOGIN"}

After creating an action, the next step is sending the action to the Redux store so it can update its state. 
In Redux, you define action creators to accomplish this. An action creator is simply a JavaScript function that returns an action.

const action = {
  type: 'LOGIN'
}
// Define an action creator here:

function actionCreator(action) {
    return action;
}
		or
let actionCreator = (action) => {
    return action;
}

------------
dispatch method is what you use to dispatch actions to the Redux store. 
Calling store.dispatch() and passing the value returned from an action creator sends an action back to the store.

const store = Redux.createStore(
  (state = {login: false}) => state
);

const loginAction = () => {
  return {
    type: 'LOGIN'
  }
};

// Dispatch the action here:
store.dispatch(loginAction())

-------
After an action is created and dispatched, the Redux store needs to know how to respond to that action. 

reducer

Reducers in Redux are responsible for the state modifications that take place in response to actions. 
A reducer takes state and action as arguments, and it always returns a new state.

Another key principle in Redux is that state is read-only.
In other words, the reducer function must always return a new copy of state and never modify state directly.

const defaultState = {
  login: false
};

const reducer = (state = defaultState, action) => {
  // change code below this line
  if(action.type == 'LOGIN')
    return {login: true}
  else
    return state 
  // change code above this line
};

const store = Redux.createStore(reducer);

const loginAction = () => {
  return {
    type: 'LOGIN'
  }
};



const defaultState = {
  authenticated: false
};

const authReducer = (state = defaultState, action) => {
  // change code below this line
  switch(action.type) {
    case 'LOGIN':
      return {authenticated: true}
    case 'LOGOUT':
      return {authenticated: false}
    default:
      return {authenticated: false}

  }
  // change code above this line
};

const store = Redux.createStore(authReducer);

const loginUser = () => {
  return {
    type: 'LOGIN'
  }
};

const logoutUser = () => {
  return {
    type: 'LOGOUT'
  }
};

A common practice when working with Redux is to assign action types as read-only constants, then reference these constants wherever they are used. 
-----------
Store Listener

Another method you have access to on the Redux store object is store.subscribe()
This allows you to subscribe listener functions to the store, which are called whenever an action is dispatched against the store.

const ADD = 'ADD';

const reducer = (state = 0, action) => {
  switch(action.type) {
    case ADD:
      return state + 1;
    default:
      return state;
  }
};

const store = Redux.createStore(reducer);

// global count variable:
let count = 0;

// change code below this line
store.subscribe(() => {count++})

// change code above this line

store.dispatch({type: ADD});
console.log(count);
store.dispatch({type: ADD});
console.log(count);
store.dispatch({type: ADD});
console.log(count);
---------------------------------------------------------------
Combine Multiple Reducers

combineReducers() - combine multiple reducers togethe

This method accepts an object as an argument in which you define properties which associate keys to specific reducer functions.
The name you give to the keys will be used by Redux as the name for the associated piece of state.

Typically, it is a good practice to create a reducer for each piece of application state when they are distinct or unique in some way. 

const rootReducer = Redux.combineReducers({
  auth: authenticationReducer,
  notes: notesReducer
});

Now, the key notes will contain all of the state associated with our notes and handled by our notesReducer. 
This is how multiple reducers can be composed to manage more complex application state. 
In this example, the state held in the Redux store would then be a single object containing auth and notes properties.

const INCREMENT = 'INCREMENT';
const DECREMENT = 'DECREMENT';

const counterReducer = (state = 0, action) => {
  switch(action.type) {
    case INCREMENT:
      return state + 1;
    case DECREMENT:
      return state - 1;
    default:
      return state;
  }
};

const LOGIN = 'LOGIN';
const LOGOUT = 'LOGOUT';

const authReducer = (state = {authenticated: false}, action) => {
  switch(action.type) {
    case LOGIN:
      return {
        authenticated: true
      }
    case LOGOUT:
      return {
        authenticated: false
      }
    default:
      return state;
  }
};

const rootReducer = Redux.combineReducers({
  count: counterReducer,
  auth: authReducer
})

const store = Redux.createStore(rootReducer);
------------------------------------------------------------
Send Action Data to the Store

const ADD_NOTE = 'ADD_NOTE';

const notesReducer = (state = 'Initial State', action) => {
  switch(action.type) {
    // change code below this line
    case ADD_NOTE:
      return action.text
    // change code above this line
    default:
      return state;
  }
};

const addNoteText = (note) => {
  // change code below this line
  return {
    type: ADD_NOTE,
    text: note
  }
  // change code above this line
};

const store = Redux.createStore(notesReducer);

console.log(store.getState());
store.dispatch(addNoteText('Hello!'));
console.log(store.getState());
------------------------------------------------------
Use Middleware to Handle Asynchronous Actions

all asynchronous endpoints in your Redux app
Redux provides middleware designed specifically for this purpose, called Redux Thunk middleware. 

Redux.applyMiddleware() - include Redux Thunk middleware

const store = Redux.createStore(
  asyncDataReducer,
  Redux.applyMiddleware(ReduxThunk.default)
);

Then, to create an asynchronous action, you return a function in the action creator that takes dispatch as an argument.
Within this function, you can dispatch actions and perform asynchronous requests.

const REQUESTING_DATA = 'REQUESTING_DATA'
const RECEIVED_DATA = 'RECEIVED_DATA'

const requestingData = () => { return {type: REQUESTING_DATA} }
const receivedData = (data) => { return {type: RECEIVED_DATA, users: data.users} }

const handleAsync = () => {
  return function(dispatch) {
    // dispatch request action here
    dispatch(requestingData())
    setTimeout(function() {
      let data = {
        users: ['Jeff', 'William', 'Alice']
      }
      // dispatch received data action here
      dispatch(receivedData(data))
    }, 2500);
  }
};

const defaultState = {
  fetching: false,
  users: []
};

const asyncDataReducer = (state = defaultState, action) => {
  switch(action.type) {
    case REQUESTING_DATA:
      return {
        fetching: true,
        users: []
      }
    case RECEIVED_DATA:
      return {
        fetching: false,
        users: action.users
      }
    default:
      return state;
  }
};

const store = Redux.createStore(
  asyncDataReducer,
  Redux.applyMiddleware(ReduxThunk.default)
);
---------------------------------------------------------------------
Counter with Redux

const INCREMENT = 'INCREMENT'; // define a constant for increment action types
const DECREMENT = 'DECREMENT'; // define a constant for decrement action types
//					state = 0 - initialization of state			
const counterReducer = (state = 0, action) => {// define the counter reducer which will increment or decrement the state based on the action it receives
    console.log(state)
    switch(action.type) {
      case INCREMENT:
        return state + 1
      case DECREMENT:
        return state - 1
      default:
        return state  
    }
}; 

const incAction = () => {return {type: INCREMENT}}; // define an action creator for incrementing

const decAction = () => {return {type:DECREMENT}}; // define an action creator for decrementing

const store = Redux.createStore(counterReducer); // define the Redux store here, passing in your reducer
--------------------------------------------------------------------
Immutable state means that you never modify state directly, instead, you return a new copy of state.

const ADD_TO_DO = 'ADD_TO_DO';

// A list of strings representing tasks to do:
const todos = [
  'Go to the store',
  'Clean the house',
  'Cook dinner',
  'Learn to code',
];

const immutableReducer = (state = todos, action) => {
  switch(action.type) {
    case ADD_TO_DO:
      // don't mutate state here or the tests will fail
      let tempArr = todos.slice()
      tempArr.push(action.todo)
      return tempArr
    default:
      return state;
  }
};

// an example todo argument would be 'Learn React',
const addToDo = (todo) => {
  return {
    type: ADD_TO_DO,
    todo
  }
}

const store = Redux.createStore(immutableReducer);
---------
const immutableReducer = (state = ['Do not mutate state!'], action) => {
  switch(action.type) {
    case 'ADD_TO_DO':
      // don't mutate state here or the tests will fail
      return [...state, action.todo] //  it only provides immutable array operations for one-dimensional arrays.
    default:
      return state;
  }
};

const addToDo = (todo) => {
  return {
    type: 'ADD_TO_DO',
    todo
  }
}

const store = Redux.createStore(immutableReducer);
---------------
const immutableReducer = (state = [0,1,2,3,4,5], action) => {
  switch(action.type) {
    case 'REMOVE_ITEM':
    
    return state.slice(0, action.index).concat(state.slice(action.index + 1))
    default:
      return state;
  }
};

const removeItem = (index) => {
  return {
    type: 'REMOVE_ITEM',
    index
  }
}

const store = Redux.createStore(immutableReducer);
------------
Copy an Object

Object.assign() - takes a target object and source objects and maps properties from the source objects to the target object.
Any matching properties are overwritten by properties in the source objects. 

const newObject = Object.assign({}, obj1, obj2);
This creates newObject as a new object, which contains the properties that currently exist in obj1 and obj2.

const defaultState = {
  user: 'CamperBot',
  status: 'offline',
  friends: '732,982',
  community: 'freeCodeCamp'
};

const immutableReducer = (state = defaultState, action) => {
  switch(action.type) {
    case 'ONLINE':
      // don't mutate state here or the tests will fail
      let tempObj = Object.assign({}, state)
      tempObj.status = 'online'
      return tempObj
    default:
      return state;
  }
};

const wakeUp = () => {
  return {
    type: 'ONLINE'
  }
};

const store = Redux.createStore(immutableReducer);
------------------------------------------------------------------------------------------------------------------------------------------------------------





																			React and Redux
																			
In a React Redux app, you create a single Redux store that manages the state of your entire app. 
Your React components subscribe to only the pieces of data in the store that are relevant to their role.
Then, you dispatch actions directly from React components, which then trigger store updates.
																			


React is a view library that you provide with data, then it renders the view in an efficient, predictable way. 
Redux is a state management framework that you can use to simplify the management of your application's state. 

Although React components can manage their own state locally, when you have a complex app, 
it's generally better to keep the app state in a single location with Redux. 
There are exceptions when individual components may have local state specific only to them. 

because Redux is not designed to work with React out of the box, you need to use the react-redux package. 
It provides a way for you to pass Redux state and dispatch to your React components as props




// define ADD, addMessage(), messageReducer(), and store here:
const ADD = 'ADD'

const addMessage = (message) => {
    return {
        type: ADD,
        message: message
    }
}

const messageReducer = (state = [], action) => {
    switch(action.type) {
        case ADD:
            return [...state, action.message]
        default:
            return state    
    }
}

const store = Redux.createStore(messageReducer)


provide React access to the Redux store and the actions it needs to dispatch updates.


React Redux provides a small API with two key features: Provider and connect.

The Provider is a wrapper component from React Redux that wraps your React app.
This wrapper then allows you to access the Redux store and dispatch functions throughout your component tree.
takes two props, the Redux store and the child components of your app.

<Provider store={store}>
  <App/>
</Provider>


// Redux Code:
const ADD = 'ADD';

const addMessage = (message) => {
  return {
    type: ADD,
    message
  }
};

const messageReducer = (state = [], action) => {
  switch (action.type) {
    case ADD:
      return [
        ...state,
        action.message
      ];
    default:
      return state;
  }
};



const store = Redux.createStore(messageReducer);

// React Code:

class DisplayMessages extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
    this.handleChange = this.handleChange.bind(this);
    this.submitMessage = this.submitMessage.bind(this);
  }
  handleChange(event) {
    this.setState({
      input: event.target.value
    });
  }
  submitMessage() {
    const currentMessage = this.state.input;
    this.setState({
      input: '',
      messages: this.state.messages.concat(currentMessage)
    });
  }
  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        <input
          value={this.state.input}
          onChange={this.handleChange}/><br/>
        <button onClick={this.submitMessage}>Submit</button>
        <ul>
          {this.state.messages.map( (message, idx) => {
              return (
                 <li key={idx}>{message}</li>
              )
            })
          }
        </ul>
      </div>
    );
  }
};

const Provider = ReactRedux.Provider;

class AppWrapper extends React.Component {
  // render the Provider here
    constructor(props) {
        super(props)
    }

    render() {
        return(
            <Provider store={store}>
                <DisplayMessages/>
            </Provider>    
        )
    }
  // change code above this line
};

---------------------------------
mapStateToProps() - provide state
	 Behind the scenes, React Redux uses the store.subscribe() method to implement mapStateToProps().
	 
	 const state = [];

	// change code below this line

	var mapStateToProps = (state) => {
  		return {messages: state}
	}



mapDispatchToProps() - provide dispatch
	used to provide specific action creators to your React components so they can dispatch actions against the Redux store. 
	It returns an object that maps dispatch actions to property names, which become component props
	instead of returning a piece of state, each property returns a function that calls dispatch with an action creator and any relevant action data. 
	You have access to this dispatch because it's passed in to mapDispatchToProps() as a parameter when you define the function, just like you passed state to mapStateToProps().
	Behind the scenes, React Redux is using Redux's store.dispatch() to conduct these dispatches with mapDispatchToProps().
	
	const addMessage = (message) => {
  	return {
    	type: 'ADD',
    	message: message
  	}
	};

	// change code below this line
	const mapDispatchToProps = dispatch => {
  	return {
    	submitNewMessage: (message) => {
      	dispatch(addMessage (message))
    	}
  	};
	};


In these functions, you declare what pieces of state you want to have access to and which action creators you need to be able to dispatch.
-----------------------------------------------
 connect - method map state and dispatch to the props of one of your React components. 
 
This method takes two optional arguments, mapStateToProps() and mapDispatchToProps(). 
They are optional because you may have a component that only needs access to state but doesn't need to dispatch any actions, or vice versa.

connect(mapStateToProps, mapDispatchToProps)(MyComponent)

If you want to omit one of the arguments to the connect method, you pass null in its place.

const addMessage = (message) => {
  return {
    type: 'ADD',
    message: message
  }
};

const mapStateToProps = (state) => {
  return {
    messages: state
  }
};

const mapDispatchToProps = (dispatch) => {
  return {
    submitNewMessage: (message) => {
      dispatch(addMessage(message));
    }
  }
};

class Presentational extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <h3>This is a Presentational Component</h3>
  }
};

const connect = ReactRedux.connect;
// change code below this line
const ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(Presentational)
------------------------------------------------------------
// Redux:
const ADD = 'ADD';

const addMessage = (message) => {
  return {
    type: ADD,
    message: message
  }
};

const messageReducer = (state = [], action) => {
  switch (action.type) {
    case ADD:
      return [
        ...state,
        action.message
      ];
    default:
      return state;
  }
};

const store = Redux.createStore(messageReducer);

// React:
class Presentational extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
    this.handleChange = this.handleChange.bind(this);
    this.submitMessage = this.submitMessage.bind(this);
  }
  handleChange(event) {
    this.setState({
      input: event.target.value
    });
  }
  submitMessage() {
    const currentMessage = this.state.input;
    this.setState({
      input: '',
      messages: this.state.messages.concat(currentMessage)
    });
  }
  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        <input
          value={this.state.input}
          onChange={this.handleChange}/><br/>
        <button onClick={this.submitMessage}>Submit</button>
        <ul>
          {this.state.messages.map( (message, idx) => {
              return (
                 <li key={idx}>{message}</li>
              )
            })
          }
        </ul>
      </div>
    );
  }
};

// React-Redux:
const mapStateToProps = (state) => {
  return { messages: state }
};

const mapDispatchToProps = (dispatch) => {
  return {
    submitNewMessage: (newMessage) => {
       dispatch(addMessage(newMessage))
    }
  }
};

const Provider = ReactRedux.Provider;
const connect = ReactRedux.connect;

// define the Container component here:
const Container = connect(mapStateToProps, mapDispatchToProps)(Presentational)

class AppWrapper extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    // complete the return statement:
    return (
      <Provider store={store}>
        <Container/>
      </Provider>
    );
  }
};
------------------------------------------------------------
// Redux:
const ADD = 'ADD';

const addMessage = (message) => {
  return {
    type: ADD,
    message: message
  }
};

const messageReducer = (state = [], action) => {
  switch (action.type) {
    case ADD:
      return [
        ...state,
        action.message
      ];
    default:
      return state;
  }
};

const store = Redux.createStore(messageReducer);

// React:
const Provider = ReactRedux.Provider;
const connect = ReactRedux.connect;

// Change code below this line
class Presentational extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: ''
    }
    this.handleChange = this.handleChange.bind(this);
    this.submitMessage = this.submitMessage.bind(this);
  }
  handleChange(event) {
    this.setState({
      input: event.target.value
    });
  }
  submitMessage() {
    this.props.submitNewMessage(this.state.input)
    this.setState({
      input: ''      
    });
  }
  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        <input
          value={this.state.input}
          onChange={this.handleChange}/><br/>
        <button onClick={this.submitMessage}>Submit</button>
        <ul>
          {this.props.messages.map( (message, idx) => {
              return (
                 <li key={idx}>{message}</li>
              )
            })
          }
        </ul>
      </div>
    );
  }
};
// Change code above this line

const mapStateToProps = (state) => {
  return {messages: state}
};

const mapDispatchToProps = (dispatch) => {
  return {
    submitNewMessage: (message) => {
      dispatch(addMessage(message))
    }
  }
};

const Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);

class AppWrapper extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <Container/>
      </Provider>
    );
  }
};
-----------------------------------------------------
/*import React from 'react'
import ReactDOM from 'react-dom'
import { Provider, connect } from 'react-redux'
import { createStore, combineReducers, applyMiddleware } from 'redux'
import thunk from 'redux-thunk'

import rootReducer from './redux/reducers'
import App from './components/App'

const store = createStore(
  rootReducer,
  applyMiddleware(thunk)
);

ReactDOM.render(
 <Provider store={store}>
    <App/>
  </Provider>,
  document.getElementById('root')
);*/





























