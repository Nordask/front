const buttonsBackgroundColor = '#CD853F';
const pressedButtonsBackgroundColor = '#A0522D';

const buttonStyle = {
  backgroundColor: buttonsBackgroundColor,
  boxShadow: "10px 10px 20px orange"
}

const buttonPressedStyle = {
  backgroundColor: pressedButtonsBackgroundColor
}

const soundsContainer = [
  {
    keyCharacter: 'Q',
    buttonCode: 81,   
    soundName: 'Bass drum: GHOST',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/SC-40%20Bassdrums/38[kb]SC40BD001.aif.mp3'
  },{
    keyCharacter: 'W',
    buttonCode: 87,   
    soundName: 'Talking drum',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/Talking%20Drum/69[kb]talking-drum-1.aif.mp3'
  },{
    keyCharacter: 'E',
    buttonCode: 69,   
    soundName: 'Burundi',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/African%20Burundi%20Drums/178[kb]big-burundi-07.wav.mp3'
  },{
    keyCharacter: 'A',
    buttonCode: 65,   
    soundName: 'Heavy crash',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/102[kb]CRASH.aif.mp3'
  },{
    keyCharacter: 'S',
    buttonCode: 83,   
    soundName: 'Tonal D2',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/Verby%20Tonal%20Kit/405[kb]D2.aif.mp3'
  },{
    keyCharacter: 'D',
    buttonCode: 68,   
    soundName: 'Prophet clap',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/Prophet/48[kb]prophet-Clap.wav.mp3'
  },{
    keyCharacter: 'Z',
    buttonCode: 90,   
    soundName: 'Claporama',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/claporama/65[kb]claporama-1.aif.mp3'
  },{
    keyCharacter: 'X',
    buttonCode: 88,   
    soundName: 'Clave big hit',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/Clave%20Big%20Hit/65[kb]clave-big-hit-7.wav.mp3'
  },{
    keyCharacter: 'C',
    buttonCode: 67,   
    soundName: 'Share slam',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/UK%20Hard%20Kit/78[kb]UK_SNARE-slam.WAV.mp3'
  }
]

const talkingDrumContainer = [
  {
    keyCharacter: 'Q',
    buttonCode: 81,   
    soundName: 'talking-drum-1',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/Talking%20Drum/69[kb]talking-drum-1.aif.mp3'
  },{
    keyCharacter: 'W',
    buttonCode: 87,   
    soundName: 'talking-drum-2',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/Talking%20Drum/21[kb]talking-drum-2.aif.mp3'
  },{
    keyCharacter: 'E',
    buttonCode: 69,   
    soundName: 'talking-drum-3',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/Talking%20Drum/36[kb]talking-drum-3.aif.mp3'
  },{
    keyCharacter: 'A',
    buttonCode: 65,   
    soundName: 'talking-drum-4',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/Talking%20Drum/49[kb]talking-drum-4.aif.mp3'
  },{
    keyCharacter: 'S',
    buttonCode: 83,   
    soundName: 'talking-drum-5',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/Talking%20Drum/44[kb]talking-drum-5.aif.mp3'
  },{
    keyCharacter: 'D',
    buttonCode: 68,   
    soundName: 'Clap',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/Prophet/48[kb]prophet-Clap.wav.mp3'
  },{
    keyCharacter: 'Z',
    buttonCode: 90,   
    soundName: 'talking-drum-7',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/Talking%20Drum/28[kb]talking-drum-7.aif.mp3'
  },{
    keyCharacter: 'X',
    buttonCode: 88,   
    soundName: 'talking-drum-8',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/Talking%20Drum/54[kb]talking-drum-8.aif.mp3'
  },{
    keyCharacter: 'C',
    buttonCode: 67,   
    soundName: 'talking-drum-9',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/Talking%20Drum/55[kb]talking-drum-9.aif.mp3'
  }
]

const heavyDrumKitContainer= [
  {
    keyCharacter: 'Q',
    buttonCode: 81,   
    soundName: 'CRASH',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/102[kb]CRASH.aif.mp3'
  },{
    keyCharacter: 'W',
    buttonCode: 87,   
    soundName: 'COWBELL1',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/8[kb]COWBELL1.aif.mp3'
  },{
    keyCharacter: 'E',
    buttonCode: 69,   
    soundName: 'OCABASA',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/9[kb]OCABASA.aif.mp3'
  },{
    keyCharacter: 'A',
    buttonCode: 65,   
    soundName: 'RIDE',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/125[kb]RIDE.aif.mp3'
  },{
    keyCharacter: 'S',
    buttonCode: 83,   
    soundName: 'SPLASH1',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/121[kb]SPLASH1.aif.mp3'
  },{
    keyCharacter: 'D',
    buttonCode: 68,   
    soundName: 'TOMHI5',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/25[kb]TOMHI5.aif.mp3'
  },{
    keyCharacter: 'Z',
    buttonCode: 90,   
    soundName: 'RASSEL',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/20[kb]RASSEL.aif.mp3'
  },{
    keyCharacter: 'X',
    buttonCode: 88,   
    soundName: 'CLAPPO0',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/54[kb]CLAPPO0.aif.mp3'
  },{
    keyCharacter: 'C',
    buttonCode: 67,   
    soundName: 'BDRUM13',
    soundUrl: 'https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/26[kb]BDRUM13.aif.mp3'
  }
]

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.myRef = React.createRef();
  }
  render() {
    return <div ref={this.myRef} />;
  }
}


class DrumButton extends React.Component{
  constructor(props){
    super(props)
    
    this.state = {
      buttonStyle: buttonStyle
    }
    
    this.myRef = React.createRef();
  }
  
  playSound = (e) => {
    const sound = this.myRef.current
    sound.currentTime = 0
    sound.play()
    this.reverseButton()
    setTimeout(() => this.reverseButton(), 100)
    this.props.getSoundName(this.props.soundId)
  }
  
  reverseButton = () => {
      if(this.state.buttonStyle.backgroundColor ===         buttonsBackgroundColor){
        this.setState({
        buttonStyle: buttonPressedStyle
        })
        //$(".drum-pad").css("background-color", "blue" )
      }else if(this.state.buttonStyle.backgroundColor ===     pressedButtonsBackgroundColor){
        this.setState({
        buttonStyle: buttonStyle
        })
  }
} 
  keyPressedHandler = (e) => {
    if(e.keyCode === this.props.buttonCode) {
      this.playSound()
    }
  }
  
  componentDidMount() {
    document.addEventListener('keydown', this.keyPressedHandler)
  }
  
  componentWillUnmount() {
    document.removeEventListener('keydown', this.keyPressedHandler)
  }
  
  render(){
    return(
      <div className="drum-pad col-lg-1 col-lg-offset-1"
            id={this.props.soundId}
            onClick={this.playSound}
            style={this.state.buttonStyle}>
        <audio className="clip"
               src={this.props.soundUrl}
               id={this.props.keyCharacter}
               ref={this.myRef}></audio>
        {this.props.keyCharacter}
      </div>
    )
  }
}

class DrumButtonsContainer extends React.Component{

  render(){
    let buttonContainer = []
    buttonContainer = this.props.soundsContainer.map(
        currentSoundItem => {       
          return(
          <DrumButton soundUrl={currentSoundItem.soundUrl}
           keyCharacter={currentSoundItem.keyCharacter} 
           buttonCode={currentSoundItem.buttonCode}
           soundId={currentSoundItem.soundName}
           getSoundName={this.props.getSoundName}/>
            )
         } 
       )
    return(
      <div className="pad-bank row">{buttonContainer}</div>
    )
  }
}

class ControlPanel extends React.Component {
  
  render(){
    return(
      <div className="controlPanel">  
        <div className="soundName">
          <p>{this.props.currentSoundContainer}</p>
        </div>
        <div className="soundName">
          <p>{this.props.soundName}</p>
        </div>
        <div>
          <button onClick={this.props.switchSoundContainer}
                  value="1">
            <i>1</i>   
          </button>
          <button onClick={this.props.switchSoundContainer}
                  value="2">
            <i>2</i>
          </button> 
        </div>  
      </div>  
    )
  }
}

class DrumMachine extends React.Component {
  
  state = {
      soundsContainer: soundsContainer,
      soundName: '',
      soundsContainerType: 'Common'
  }

  switchSoundContainer = (e) => {
    let soundContainer = []
    let containerType = ''
    switch(e.target.value) {
      case '1' :
        soundContainer = talkingDrumContainer
        containerType = 'Talking'
        break
      case '2' :
        soundContainer = heavyDrumKitContainer
        containerType = 'Heavy'
        break
      default:
        soundContainer = soundsContainer
        containerType = 'Common'
    }
    this.setState({
      soundsContainer: soundContainer,
      soundsContainerType: containerType  
    })
  }
  getSoundName = (name) => {
    this.setState({
      soundName:name
    })
  }
  
  render() {
    return(
      <div id="drum-machine">
        <div id="display">
          <DrumButtonsContainer 
            soundsContainer={this.state.soundsContainer} 
            getSoundName={this.getSoundName}/>
          <ControlPanel soundName={this.state.soundName}
     currentSoundContainer={this.state.soundsContainerType}
     switchSoundContainer={this.switchSoundContainer}/>  
        </div>
      </div>
    )
  }
}

ReactDOM.render(<DrumMachine />,
document.getElementById('machine'));